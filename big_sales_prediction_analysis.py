# -*- coding: utf-8 -*-
"""Big Sales Prediction Analysis

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16amo3-qr3RvW0xsyzQm_sRjWLAKvI9Pq

# **Big Sales Prediction**

# **Get Understanding About DataSet**

There are 12 variables in the Dataset:

1. Item_Identifier
2. Item_Weight
3. Item_Fat_Content
4. Item_Visibility
5. Item_Type
6. Item_MRP
7. Outlet_Identifier
8. Item_Establisment_Year
9. Outlet_Size
10. Outlet_Location_Type
11. Outlet_Type
12. Item_Outlet_Sales

# **Import Libraries**
"""

import pandas as pd
import numpy as np

"""# **Import CSV as Data Frame**"""

data = pd.read_csv('/content/Big Sales Data.csv')

"""# **Analyzing the Data**"""

data.head()

data.info()

data.columns

data.describe()

import seaborn as sns
sns.pairplot(data)

"""# **Get Categories and Counts of Categorial Variables**"""

data[['Item_Identifier']].value_counts()

data[['Item_Fat_Content']].value_counts()

data.replace({'Item_Fat_Content': {'LF':'Low Fat','low fat':'Low Fat','reg':'Regular'}},inplace=True)

data[['Item_Fat_Content']].value_counts()

data.replace({'Item_Fat_Content':{'Low Fat':0,'Regular':1}},inplace=True)

data[['Item_Type']].value_counts()

data.replace({'Item_Type':{'Fruits and Vegetables':0,'Snack Foods':0,'Household':1,
                           'Frozen Foods':0,'Dairy':0,'Baking Goods':0,
                           'Canned':0,'Health and Hygiene':1,
                           'Meat':0, 'Soft Drinks':0,'Breads':0,'Hard Drinks':0,
                           'Others':2,'Starchy Foods':0,'Breakfast':0,'Seafood':0,
}},inplace=True)

data[['Item_Type']].value_counts()

data[['Outlet_Identifier']].value_counts()

data.replace({'Outlet_Identifier':{'OUT027':0,'OUT013':1,
                                   'OUT049':2,'OUT046':3,'OUT035':4,
                                   'OUT045':5,'OUT018':6,
                                   'OUT017':7,'OUT010':8,'OUT019':9
}},inplace=True)

data[['Outlet_Identifier']].value_counts()

data[['Outlet_Size']].value_counts()

data.replace({'Outlet_Size':{'Small':0,'Medium':1,'High':2}},inplace=True)

data[['Outlet_Size']].value_counts()

data[['Outlet_Location_Type']].value_counts()

data.replace({'Outlet_Location_Type':{'Tier 3':0,'Tier 2':1,'Tier 1':2}},inplace=True)

data[['Outlet_Location_Type']].value_counts()

data[['Outlet_Type']].value_counts()

data.replace({'Outlet_Type':{'Grocery Store':0,'Supermarket Type1':1,'Supermarket Type2':2,
                             'Supermarket Type3':3}},inplace=True)

data[['Outlet_Type']].value_counts()

data.head()

data.info()

"""# **Get Shape of Data Frame**"""

data.shape

"""# **Define Y (dependent or label or target variables) and X (independent or features or attribute Variable)**"""

y = data['Item_Outlet_Sales']

y.shape

y

x = data.drop(['Item_Identifier','Item_Outlet_Sales'],axis=1)

x.shape

x

"""# **Get X Variables Standardized**"""

from sklearn.preprocessing import StandardScaler

sc = StandardScaler()

x_std = data[['Item_Weight','Item_Visibility','Item_MRP','Outlet_Establishment_Year']]

x_std = sc.fit_transform(x_std)

x_std

x[['Item_Weight','Item_Visibility','Item_MRP','Outlet_Establishment_Year']] = pd.DataFrame(x_std, columns = [['Item_Weight','Item_Visibility','Item_MRP','Outlet_Establishment_Year']])

x

"""# **Get Train Test Split**"""

from sklearn.model_selection import train_test_split

x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.1,random_state=2529)

x_train.shape,x_test.shape,y_train.shape,y_test.shape

"""#  **Get Model Train**"""

import pandas as pd
from sklearn.ensemble import RandomForestRegressor
from sklearn.impute import SimpleImputer

# Create an imputer to replace missing values with the mean
imputer = SimpleImputer(strategy='mean')

# Fit the imputer on your training data and transform both training and test data
x_train_imputed = imputer.fit_transform(x_train)
x_test_imputed = imputer.transform(x_test)

rfr = RandomForestRegressor(random_state=2529)
rfr.fit(x_train_imputed, y_train)  # Use the imputed data for training

"""# **Get Model Prediction**"""

y_pred = rfr.predict(x_test_imputed)

y_pred.shape

y_pred

"""# **Get Model Evaluation**"""

from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score

mean_squared_error(y_test ,y_pred)

mean_absolute_error(y_test ,y_pred)

"""# **Visualization of Actual vs Predicted Results**"""

import matplotlib.pyplot as plt
plt.scatter(y_test,y_pred)
plt.xlabel('Actual Prices')
plt.ylabel('Predicted Prices')
plt.title('Actual Prices vs Predicted Prices')
plt.show()